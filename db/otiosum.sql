-- MySQL Script generated by MySQL Workbench
-- Sat Mar 27 16:12:35 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema otiosum
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema otiosum
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `otiosum` DEFAULT CHARACTER SET utf8 COLLATE utf8_slovenian_ci ;
USE `otiosum` ;

-- -----------------------------------------------------
-- Table `otiosum`.`brand`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`brand` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`brand` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Brand ID',
  `title` VARCHAR(150) NOT NULL COMMENT 'Name of the brand',
  `image` TEXT NOT NULL COMMENT 'Image of the brand',
  `date_created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT 'The Date when brand has been added/created',
  `date_updated` DATETIME NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP() COMMENT 'Datetime of when the brand was last updated',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB
COMMENT = 'Table containing data about a brand';


-- -----------------------------------------------------
-- Table `otiosum`.`product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`product` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`product` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(150) NOT NULL COMMENT 'Title/name of the product',
  `summary` TINYTEXT NULL COMMENT 'A brief summary of the product',
  `description` TEXT NULL COMMENT 'A more detailed description of the product',
  `sku` SMALLINT(6) NOT NULL COMMENT 'Number of items that can be in storage',
  `quantity` SMALLINT(6) NOT NULL COMMENT 'Curent quantity/number of items available\n',
  `price` FLOAT NOT NULL COMMENT 'The price of the product',
  `date_created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT 'The time and date when the product was created',
  `date_updated` DATETIME NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP() COMMENT 'Time and date when the product was updated',
  `brand_id` INT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_product_brand1_idx` (`brand_id` ASC),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  CONSTRAINT `fk_product_brand1`
    FOREIGN KEY (`brand_id`)
    REFERENCES `otiosum`.`brand` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Table that containes information about the product';


-- -----------------------------------------------------
-- Table `otiosum`.`product_image`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`product_image` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`product_image` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Image id',
  `image` TEXT NOT NULL COMMENT 'The image',
  `date_created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT 'Date/time when image was created',
  `date_updated` DATETIME NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP() COMMENT 'date/time when image was updated',
  `product_id` INT NOT NULL COMMENT 'Id of the product to whom the image belongs',
  PRIMARY KEY (`id`),
  INDEX `fk_product_image_product_idx` (`product_id` ASC),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  CONSTRAINT `fk_product_image_product`
    FOREIGN KEY (`product_id`)
    REFERENCES `otiosum`.`product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Table containing image of a product';


-- -----------------------------------------------------
-- Table `otiosum`.`category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`category` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`category` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `category` VARCHAR(75) NOT NULL COMMENT 'Category name',
  `date_created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT 'Date/time of category creation',
  `date_updated` DATETIME NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP() COMMENT 'date/time of last update',
  `parent_id` INT NULL COMMENT 'Parent ID of the subcategory',
  PRIMARY KEY (`id`),
  INDEX `fk_category_category1_idx` (`parent_id` ASC),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  CONSTRAINT `fk_category_category1`
    FOREIGN KEY (`parent_id`)
    REFERENCES `otiosum`.`category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Table containing differante category';


-- -----------------------------------------------------
-- Table `otiosum`.`product_category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`product_category` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`product_category` (
  `product_id` INT NOT NULL,
  `category_id` INT NOT NULL,
  PRIMARY KEY (`product_id`, `category_id`),
  INDEX `fk_product_category_category1_idx` (`category_id` ASC),
  INDEX `fk_product_category_product1_idx` (`product_id` ASC),
  CONSTRAINT `fk_product_category_category1`
    FOREIGN KEY (`category_id`)
    REFERENCES `otiosum`.`category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_product_category_product1`
    FOREIGN KEY (`product_id`)
    REFERENCES `otiosum`.`product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Connecting table for multiple-multiple relationship between product and category';


-- -----------------------------------------------------
-- Table `otiosum`.`sale`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`sale` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`sale` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'The sales ID',
  `date_start` DATETIME NOT NULL COMMENT 'Date and Time of the Sales start',
  `date_stop` DATETIME NOT NULL COMMENT 'Date and time of the end of Sale',
  `discount` INT NOT NULL COMMENT 'The discount on the sale',
  `date_created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT 'Datetime of the creation of the sale',
  `date_updated` DATETIME NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP() COMMENT 'Datetime of the sales update',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `otiosum`.`product_sale`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`product_sale` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`product_sale` (
  `product_id` INT NOT NULL,
  `sale_id` INT NOT NULL,
  PRIMARY KEY (`product_id`, `sale_id`),
  INDEX `fk_product_sale_product1_idx` (`product_id` ASC),
  INDEX `fk_product_sale_sale1_idx` (`sale_id` ASC),
  CONSTRAINT `fk_product_sale_product1`
    FOREIGN KEY (`product_id`)
    REFERENCES `otiosum`.`product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_product_sale_sale1`
    FOREIGN KEY (`sale_id`)
    REFERENCES `otiosum`.`sale` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `otiosum`.`country`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`country` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`country` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Country ID',
  `country` VARCHAR(55) NOT NULL COMMENT 'Country name',
  `ISO2` VARCHAR(2) NOT NULL COMMENT 'ISO2 short name',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `ISO2_UNIQUE` (`ISO2` ASC),
  UNIQUE INDEX `country_UNIQUE` (`country` ASC),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `otiosum`.`city`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`city` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`city` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `country_id` INT NOT NULL COMMENT 'Country ID',
  `postal_code` VARCHAR(10) NOT NULL COMMENT 'postal code of the city',
  `city` VARCHAR(60) NOT NULL COMMENT 'The name of the City',
  PRIMARY KEY (`id`, `country_id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_city_country1_idx` (`country_id` ASC),
  CONSTRAINT `fk_city_country1`
    FOREIGN KEY (`country_id`)
    REFERENCES `otiosum`.`country` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `otiosum`.`account_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`account_type` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`account_type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'account type ID',
  `code` TINYINT NOT NULL COMMENT 'Differante account types\n0 - Admin\n1 - Moderator\n2 - User',
  `type` VARCHAR(45) NOT NULL COMMENT 'More descriptive name for code',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  UNIQUE INDEX `type_UNIQUE` (`type` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `otiosum`.`account`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`account` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`account` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Account ID',
  `username` VARCHAR(120) NOT NULL COMMENT 'Account username',
  `email` VARCHAR(150) NOT NULL COMMENT 'Account email',
  `password` TEXT NOT NULL COMMENT 'Account hashed password',
  `first_name` VARCHAR(60) NOT NULL COMMENT 'The first name of the user.',
  `last_name` VARCHAR(60) NOT NULL COMMENT 'The last name of the user',
  `address` VARCHAR(75) NOT NULL COMMENT 'Users address',
  `address2` VARCHAR(75) NULL COMMENT 'Users second address',
  `phone_number` VARCHAR(20) NULL COMMENT 'Users phone number',
  `active` BIT NOT NULL DEFAULT 0 COMMENT 'Checks if account has been activated',
  `token` TEXT NOT NULL COMMENT 'Token ',
  `city_id` INT NOT NULL COMMENT 'City ID',
  `account_type_id` INT NOT NULL COMMENT 'The account type ID',
  `date_created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT 'When account was first created',
  `date_updated` DATETIME NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP() COMMENT 'When account data was last updated',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  INDEX `fk_account_account_type1_idx` (`account_type_id` ASC),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC),
  UNIQUE INDEX `phone_number_UNIQUE` (`phone_number` ASC),
  UNIQUE INDEX `token_UNIQUE` (`token` ASC),
  INDEX `fk_account_city1_idx` (`city_id` ASC),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  CONSTRAINT `fk_account_account_type1`
    FOREIGN KEY (`account_type_id`)
    REFERENCES `otiosum`.`account_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_account_city1`
    FOREIGN KEY (`city_id`)
    REFERENCES `otiosum`.`city` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `otiosum`.`review`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`review` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`review` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'ID of the review',
  `comment` TINYTEXT NOT NULL COMMENT 'The contents of the review',
  `rating` TINYINT NULL COMMENT 'A numerical value of the rating from 0-5',
  `date_created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT 'The date and time when the review has been created',
  `date_updated` DATETIME NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP() COMMENT 'The date and time of when the review has been changed/updated',
  `account_id` INT NOT NULL COMMENT 'The ID of the account who wrote the review',
  `product_id` INT NOT NULL COMMENT 'The ID of the product to whom the review ',
  PRIMARY KEY (`id`),
  INDEX `fk_review_account1_idx` (`account_id` ASC),
  INDEX `fk_review_product1_idx` (`product_id` ASC),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  CONSTRAINT `fk_review_account1`
    FOREIGN KEY (`account_id`)
    REFERENCES `otiosum`.`account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_review_product1`
    FOREIGN KEY (`product_id`)
    REFERENCES `otiosum`.`product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `otiosum`.`security`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`security` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`security` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `date_registered` DATETIME NOT NULL,
  `first_loggin` DATETIME NULL,
  `last_loggin` DATETIME NULL,
  `account_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_security_account1_idx` (`account_id` ASC),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  CONSTRAINT `fk_security_account1`
    FOREIGN KEY (`account_id`)
    REFERENCES `otiosum`.`account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `otiosum`.`measurement`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`measurement` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`measurement` (
  `product_id` INT NOT NULL,
  `height` FLOAT NULL,
  `width` FLOAT NULL,
  `lenght` FLOAT NULL,
  `weight` FLOAT NULL,
  PRIMARY KEY (`product_id`),
  CONSTRAINT `fk_measurement_product1`
    FOREIGN KEY (`product_id`)
    REFERENCES `otiosum`.`product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `otiosum`.`order_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`order_status` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`order_status` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id of the order status',
  `code` TINYINT NOT NULL COMMENT 'Differante states the order can be in\n0 - Ordered\n1 - Shipped\n2 - Delivered\n3 - Unable to deliver\n4 - Canceled',
  `status` VARCHAR(45) NOT NULL COMMENT 'Character name for the status code',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC),
  UNIQUE INDEX `status_UNIQUE` (`status` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `otiosum`.`order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`order` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`order` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `total` FLOAT NOT NULL,
  `date_created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `date_updated` DATETIME NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `account_id` INT NOT NULL,
  `order_status_id` INT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_order_account1_idx` (`account_id` ASC),
  INDEX `fk_order_order_status1_idx` (`order_status_id` ASC),
  CONSTRAINT `fk_order_account1`
    FOREIGN KEY (`account_id`)
    REFERENCES `otiosum`.`account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_order_status1`
    FOREIGN KEY (`order_status_id`)
    REFERENCES `otiosum`.`order_status` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `otiosum`.`order_item`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`order_item` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`order_item` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `product_id` INT NOT NULL,
  `quantity` INT NOT NULL,
  `price` FLOAT NOT NULL,
  `total` FLOAT NOT NULL,
  `date_created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `date_updated` DATETIME NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `order_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `idorder_item_UNIQUE` (`id` ASC),
  INDEX `fk_order_item_product1_idx` (`product_id` ASC),
  INDEX `fk_order_item_order1_idx` (`order_id` ASC),
  CONSTRAINT `fk_order_item_product1`
    FOREIGN KEY (`product_id`)
    REFERENCES `otiosum`.`product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_item_order1`
    FOREIGN KEY (`order_id`)
    REFERENCES `otiosum`.`order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `otiosum`.`payment_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`payment_type` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`payment_type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` TINYINT NOT NULL,
  `type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC),
  UNIQUE INDEX `type_UNIQUE` (`type` ASC))
ENGINE = InnoDB
COMMENT = '	';


-- -----------------------------------------------------
-- Table `otiosum`.`transaction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `otiosum`.`transaction` ;

CREATE TABLE IF NOT EXISTS `otiosum`.`transaction` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `account_id` INT NOT NULL,
  `order_id` INT NOT NULL,
  `payment_type_id` INT NOT NULL,
  `code` VARCHAR(100) NOT NULL,
  `date_created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `date_updated` DATETIME NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  PRIMARY KEY (`id`),
  INDEX `fk_transaction_account1_idx` (`account_id` ASC),
  INDEX `fk_transaction_payment_type1_idx` (`payment_type_id` ASC),
  INDEX `fk_transaction_order1_idx` (`order_id` ASC),
  CONSTRAINT `fk_transaction_account1`
    FOREIGN KEY (`account_id`)
    REFERENCES `otiosum`.`account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transaction_payment_type1`
    FOREIGN KEY (`payment_type_id`)
    REFERENCES `otiosum`.`payment_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transaction_order1`
    FOREIGN KEY (`order_id`)
    REFERENCES `otiosum`.`order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
